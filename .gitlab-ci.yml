# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:3.10.1-buster

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - .venv/

before_script:
  - python --version  # For debugging
  - pip --version
  - pip install --quiet virtualenv
  - virtualenv .venv
  - source .venv/bin/activate
  - pip install --quiet coverage anybadge
  - pip install --quiet -r $CI_PROJECT_DIR/requirements.txt

pylint:
  script:
    - pylint --exit-zero --rcfile=$CI_PROJECT_DIR/.pylintrc --output-format=text bci test | tee pylint.log
    - PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' pylint.log)
    - anybadge --label=pylint --file=pylint.svg --value=$PYLINT_SCORE 2=red 4=orange 8=yellow 10=green
    - echo "Pylint score is $PYLINT_SCORE"
  artifacts:
    when: always
    paths:
      - pylint.svg

flake8:
  script:
    - flake8 --exit-zero --count --show-source --statistics --config $CI_PROJECT_DIR/.flake8 bci test > flake8.log
    - FLAKE8_ISSUES=$(cat flake8.log | tail -1)
    - anybadge --label=flake8 --file=flake8.svg --value="$FLAKE8_ISSUES issues"
    - echo "Flake8 found $FLAKE8_ISSUES issues"
  artifacts:
    when: always
    paths:
      - flake8.svg

test:
  script:
    - source .venv/bin/activate
    - coverage run --source=bci -m unittest discover -v -s ./test
    - coverage report > coverage.log
    - cat coverage.log
  artifacts:
    when: always
    reports:
      cobertura: coverage.log
